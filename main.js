!function(){"use strict";var e={665:function(e,t,s){e.exports=s.p+"df100efc54d4645073d7.jpg"},291:function(e,t,s){e.exports=s.p+"8edfe6cd78e39aafc871.jpg"},822:function(e,t,s){e.exports=s.p+"44e6fede87f55e5327cc.jpg"},328:function(e,t,s){e.exports=s.p+"e463b225f0897d749d63.jpg"},705:function(e,t,s){e.exports=s.p+"70aac30a40409c4dbc71.jpg"},561:function(e,t,s){e.exports=s.p+"2e37fd0c260a298af732.jpg"}},t={};function s(r){var n=t[r];if(void 0!==n)return n.exports;var i=t[r]={exports:{}};return e[r](i,i.exports,s),i.exports}s.m=e,s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s.b=document.baseURI||self.location.href,function(){new URL(s(561),s.b),new URL(s(822),s.b),new URL(s(665),s.b),new URL(s(328),s.b),new URL(s(705),s.b),new URL(s(291),s.b);const e={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"};class t{constructor(e,t){let{cardData:s,handleCardClick:r,handleDeleteSubmit:n,handleCardLike:i}=e;this._name=s.name,this._link=s.link,this._cardID=s._id,this._userID=s._userID,this._cardLike=s.likes,this._handleCardClick=r,this._handleDeleteSubmit=n,this._handleCardLike=i,this._cardSelector=t}_handleLikeButton(){this._likeButton.classList.toggle("card__like-button_active")}_handleDeleteButton(){this._cardElement.remove(),this._cardElement=null}_updateCardLike(e){this._cardLike=e}_setEvenetListeners(){this._likeButton.addEventListener("click",(()=>{this._handleLikeButton()})),this._deleteButton.addEventListener("click",(()=>{this._handleDeleteSubmit(this._cardID)})),this._cardImage.addEventListener("click",(()=>{this._handleCardClick({link:this._link,name:this._name})}))}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}generateCard(){return this._cardElement=this._getTemplate(),this._deleteButton=this._cardElement.querySelector(".card__delete-button"),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._cardImage=this._cardElement.querySelector(".card__image"),this._cardImage.src=this._link,this._cardImage.alt=this._name,this._cardElement.querySelector(".card__name").textContent=this._name,this._setEvenetListeners(),this._cardElement}}class r{constructor(e,t){this._settings=e,this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t}_setEventListeners(){this._inputList=[...this._form.querySelectorAll(this._inputSelector)],this._buttonElement=this._form.querySelector(this._submitButtonSelector),this._toggleSubmitButton(),this._form.addEventListener("reset",(()=>{setTimeout((()=>{this._toggleSubmitButton()}),0)})),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._isValid(e),this._toggleSubmitButton()}))}))}_toggleSubmitButton(){this._hasInvalidInput(this._inputList)?(this._buttonElement.disabled=!0,this._buttonElement.classList.add(this._inactiveButtonClass)):(this._buttonElement.disabled=!1,this._buttonElement.classList.remove(this._inactiveButtonClass))}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}_isValid(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class n{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._cardSection=t}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._cardSection.prepend(e)}}class i{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t),this._closeButton=this._popupElement.querySelector(".popup__close")}open(){this._popupElement.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._popupElement.addEventListener("click",(e=>{e.target===e.currentTarget&&this.close()})),this._closeButton.addEventListener("click",(()=>{this.close()}))}}class o extends i{constructor(e,t,s){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".popup__form"),this._popupInputs=this._popupElement.querySelectorAll(".popup__input"),this._handleFormSubmit=t,this._submitButton=this._popupForm.querySelector(".popup__button"),this._defaultTextOnButton=this._submitButton.textContent,this._loadingText=s}close(){this._popupForm.reset(),super.close()}_getInputValues(){const e={};return this._popupInputs.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}showLoading(){this._submitButton.textContent=this._loadingText}hideLoading(){this._submitButton.textContent=this._defaultTextOnButton}}const a=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_checkServerRes=e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`);getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(this._checkServerRes)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._checkServerRes)}editProfile(e){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:"Marie SkÅ‚odowska Curie",about:"Physicist and Chemist"})}).then(this._checkServerRes)}addNewCard(e){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})}).then(this._checkServerRes)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkServerRes)}likeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then(this._checkServerRes)}unlikeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then(this._checkServerRes)}updateProfilePic(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e.link})}).then(this._checkServerRes)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"c48cc533-37fe-4aec-bc10-a2c7c93d6979","Content-Type":"application/json"}});function c(e){const s=new t({cardData:e,handleCardClick:e=>{u.open(e)},handleDeleteSubmit:e=>{p.setSubmitAction((()=>{p.showLoading(),a.deleteCard(e).then((()=>{s._handleDeleteButton(),p.close()})).catch((e=>{console.error(e)})).finally((()=>{p.hideLoading()}))})),p.open()},handleCardLike:e=>{a.likeCard(e).then((()=>{s.updateCardLike(cardData.likes)})).catch((e=>console.error(e)))},handleCardUnlike:e=>{a.unlikeCard(e).then((()=>{s.updateCardLike(cardData.likes)})).catch((e=>console.error(e)))}},".card-template_type_default");return s.generateCard()}const l=document.querySelector(".cards__list");let h,d;Promise.all([a.getUserInfo(),a.getInitialCards()]).then((e=>{let[t,s]=e;C.setUserInfo(t.name,t.about),h=t._id,d=new n({items:s,renderer:e=>{const t=c(e);d.addItem(t)}},l),d.renderItems(s)})).catch((e=>console.error(e)));const u=new class extends i{constructor(e){super({popupSelector:e}),this._previewImage=this._popupElement.querySelector(".popup__preview-image"),this._previewName=this._popupElement.querySelector(".popup__preview-name"),super.setEventListeners()}open(e){this._previewImage.src=e.link,this._previewImage.alt=e.name,this._previewName.textContent=e.name,super.open()}}("#preview-image-popup");u.close();const p=new class extends i{constructor(e,t){super({popupSelector:e}),this._popupConfirm=this._popupElement.querySelector(".popup__container"),this._confirmButton=this._popupConfirm.querySelector(".popup__confirm-button"),this._defaultTextOnButton=this._confirmButton.textContent,this._loadingText=t}setSubmitAction(e){this._handleSubmit=e}setEventListeners(){super.setEventListeners(),this._confirmButton.addEventListener("click",(e=>{e.preventDefault(),this._handleSubmit()}))}showLoading(){this._confirmButton.textContent=this._loadingText}hideLoading(){this._confirmButton.textContent=this._defaultTextOnButton}}("#delete-card-popup","Deleting...");p.setEventListeners();const _=document.querySelector(".profile__image-overlay"),m=new o("#edit-avatar-popup",(e=>{m.showLoading(),a.updateProfilePic(e).then((()=>{k.src=e.link,m.close()})).catch((e=>console.error(e))).finally((()=>{m.hideLoading()}))}),"Saving...");_.addEventListener("click",(()=>{m.open()})),m.setEventListeners();const f=document.querySelector(".profile__add-button"),v=new o("#add-card-popup",(e=>{v.showLoading(),a.addNewCard(e).then((e=>{const t=c(e);v.close(),d.addItem(t)})).catch((e=>console.error(e))).finally((()=>{v.hideLoading()}))}),"Creating...");f.addEventListener("click",(()=>{v.open()})),v.setEventListeners();const S=document.querySelector(".profile__name"),b=document.querySelector(".profile__description"),E=document.querySelector("#form-input-name"),L=document.querySelector("#form-input-description"),g=document.querySelector(".profile__edit-button"),C=new class{constructor(e,t){this._name=e,this._about=t}getUserInfo(){const e={};return e.profileName=this._name.textContent,e.profileAbout=this._about.textContent,e}setUserInfo(e,t){this._name.textContent=e,this._about.textContent=t}}(S,b),k=document.querySelector(".profile__image"),y=new o("#profile-edit-popup",(e=>{y.showLoading(),a.editProfile().then((()=>{C.setUserInfo(e.name,e.description),y.close()})).catch((e=>console.error(e))).finally((()=>{y.hideLoading()}))}),"Saving...");g.addEventListener("click",(()=>{const e=C.getUserInfo();E.value=e.profileName,L.value=e.profileAbout,y.open()})),y.setEventListeners();const w=[...document.querySelectorAll(e.formSelector)];console.log(w),w.forEach((t=>{new r(e,t).enableValidation()}))}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,